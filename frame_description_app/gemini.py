import requests
import base64
import toml


def describe_image(prompt, encoded_image, api_key):
    """Sends an image to Gemini Pro Vision and returns its description.

  Args:
        prompt (str): The prompt to use for the description.
        encoded_image (str): The image encoded as a base64 string.
      api_key (str): Your Google Cloud API key.

  Returns:
      str: The description generated by Gemini, or an error message.
  """

    request_data = {
        'contents': [{
            'parts': [
                {'text': prompt},
                {'inline_data': {
                    'mime_type': 'image/jpeg',
                    'data': encoded_image
                }}
            ]
        }]
    }

    headers = {'Content-Type': 'application/json'}
    print("Using key: " + api_key)
    url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent?key=' + api_key

    try:
        response = requests.post(url, headers=headers, json=request_data)
        response.raise_for_status()  # Raise an exception for non-200 status codes
        response_json = response.json()
        # print(response_json)
        return response_json['candidates'][0]['content']['parts'][0]['text']
    except requests.exceptions.RequestException as e:
        return f'Error: {e}'


if __name__ == '__main__':
    api_key = toml.load('config.toml')['gemini']['api_keys'][0]
    image_path = 'sample_video/friendship.png'

    with open(image_path, 'rb') as file:
        encoded_image = base64.b64encode(file.read()).decode()

    description = describe_image('Describe the following image', encoded_image, api_key)
    print(description)
